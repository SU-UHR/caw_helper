<?php
/**
 * @file
 */

/**
 * Implements hook_help().
 */
function caw_helper_help($path, $arg) {
  switch ($path) {
    case 'admin/help#caw':
      return '<p>' . t('Please contact your site administrator') . '</p>';
  }
}

/**
 * Set the bean blocks title to "<none>" if bean has a title and block does not.
 * @param  [type] &$blocks     [description]
 * @param  [type] $theme       [description]
 * @param  [type] $code_blocks [description]
 * @return [type]              [description]
 */
function caw_helper_block_view_alter(&$data, $block) {

  // Hide the title for stanford postcard beans with the cards view mode.
  if ($block->module == "bean" && isset($data['content']['bean'][$block->delta]["#bundle"]) && $data['content']['bean'][$block->delta]['#bundle'] == "stanford_postcard") {
    $bean = $data['content']['bean'][$block->delta];
    $modes = array("stanford_tiles", "default", "stanford_callout_block");
    if (in_array($bean["#view_mode"], $modes)) {
      $data['subject'] = "";
    }
  }

}

/**
 * Implements hook_theme_registry_alter().
 */
function caw_helper_theme_registry_alter(&$theme_registry) {
  if (isset($theme_registry['facetapi_count'])) {
    $theme_registry['facetapi_count']['function'] = "caw_helper_facetapi_count";
  }
}


/**
 * [caw_helper_facetapi_count_alter description]
 * @param  [type] &$vars [description]
 * @return [type]        [description]
 */
function caw_helper_facetapi_count(&$variables) {
  return '<span class="facetapi-count">(' . (int) $variables['count'] . ')</span>';
}

/**
 * Implements hook_init().
 */
function caw_helper_init() {

  $file_path = drupal_get_path('module', 'caw_helper') . "/css/caw_helper.css";
  $conditions = "admin
admin*
node/*/edit
block/*/edit*
block/add*
node/add*
user/*/edit
node/*/delete";

  $css_rules = array();
  $css_rules['rule_conditions'] = $conditions;
  $css_rules['rule_type'] = CSS_INJECTOR_PAGES_NOTLISTED;

  $pass = _css_injector_evaluate_rule($css_rules);
  if ($pass) {
    drupal_add_css($file_path, array('type' => 'file', 'group' => CSS_THEME, 'media' => "all", 'preprocess' => TRUE, 'weight' => 300));
  }

}

/**
 * Check the box if a resource is checked.
 * @param  [type] &$build    [description]
 * @param  [type] &$settings [description]
 * @return [type]            [description]
 */
function caw_helper_facet_items_alter(&$build, &$settings) {
  if ($settings->facet == "type") {
    $fs = isset($_GET['f']) ? $_GET['f'] : array();
    foreach ($fs as $index => $value) {
      if (strpos($value, 'field_s_resource_type') !== FALSE) {
        $build['stanford_resource']["#active"] = 1;
        break;
      }
    }
  }
}

/**
 * Implements hook_views_api().
 */
function caw_helper_views_api() {
  return array(
    'api' => "3.0",
  );
}

/**
 * Implements hook_preprocess().
 */
function caw_helper_preprocess_page(&$vars) {

  // Don't hide the title on node/edit pages. le sigh.
  if (path_is_admin(current_path())) {
    return;
  }

  // If the landing page option to hide title is set to true, hide it.
  if (isset($vars['node']) && $vars['node']->type == "stanford_landing_page") {
    $node = $vars['node'];
    if (isset($node->field_hide_title[LANGUAGE_NONE][0]['value']) && $node->field_hide_title[LANGUAGE_NONE][0]['value'] == "1") {
      drupal_set_title('');
    }
  }
}

/**
 * Alter tha alias of the caw_course content type.
 * @param  [type] &$alias  [description]
 * @param  [type] $context [description]
 * @return [type]          [description]
 */
function caw_helper_pathauto_alias_alter(&$alias, $context) {

  $node = (isset($context['data']['node'])) ? $context['data']['node'] : FALSE;
  $original_alias = $alias;

  // Stop if pathauto is not set, or if not a course node, or if the event series is not available.
  if (!$node
      || !isset($node->path['pathauto'])
      || $node->path['pathauto'] === 0
      || $node->type !== "caw_course"
      || empty($node->field_caw_course_event_series_ca[LANGUAGE_NONE])) {
    return;
  }

  // Load the term so we can its fields.
  $terms = entity_load("taxonomy_term", array($node->field_caw_course_event_series_ca[LANGUAGE_NONE][0]['tid']));
  if (!$terms) {
    return;
  }

  $term = array_pop($terms);
  // Check to see that the term has a rule.
  if (!isset($term->field_node_pathauto_rule) || empty($term->field_node_pathauto_rule[LANGUAGE_NONE][0]['value'])) {
    return;
  }

  // We are good here. Set the pattern and go.
  $event_series_pattern = "[node:field-caw-course-event-series-ca:field_node_pathauto_rule]/[node:title]";

  // The string is not being translated properly by entering it into the field.
  // We need special fun.
  $new_alias = token_replace($event_series_pattern, array("node" => $node));
  $parts = explode("/", $new_alias);
  $clean = array_map("pathauto_cleanstring", $parts);
  $new_alias = implode("/", $clean);

  $alias = $new_alias;
}

/**
 * Implements hook_node_view_alter().
 */
function caw_helper_node_view_alter(&$build) {
  // We want to redirect users to the saml login rather than drupal's internal login for posting comments.
  $build['links']['comment']['#links']['comment_forbidden']['title'] = l('Log in', '/saml_login', array('query' => array('destination' => 'node/' . $build['#node']->nid), 'fragment' => 'comment-form')) . ' to post comments.';
}
